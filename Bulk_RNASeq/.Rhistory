knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
library(gridExtra)
library(proteusLabelFree)
library(dplyr)
library(msqrob2gui)
library(ExploreModelMatrix)
library(VennDiagram)
library(ggrepel)
library(ggplot2)
library("ggVennDiagram")
library(clusterProfiler)
library(enrichplot)
organism = "org.Hs.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#launchMsqrob2App()
setwd("../Proteomics/0_ECM/")
peptidesFile <- "peptides.txt"
pep <- read.table(peptidesFile, sep = "\t", header = T)
# All dataset
pep <- pep %>%
mutate(Proteins = ifelse(Proteins == "", NA, Proteins)) %>%
mutate(Intensity.1C3_d37_ECM_R1 = ifelse(Intensity.1C3_d37_ECM_R1 == "", NA, Intensity.1C3_d37_ECM_R1)) %>%
filter(Proteins != "NA") %>%
filter(Intensity.1C3_d37_ECM_R1 != "NA")
# ECM
pep <- pep[,-c(87:91, 95,96,97)]
# F1
#pep <- pep[,-c(83:88, 92:94)]
pep <- pep %>%
mutate(Proteins = sapply(str_split(Proteins, ";"), function(x) paste(x[1], collapse = ";")))
#names(pep)[names(pep) == "Intensity.2G9_d37_ECM_R1"] <- "Intensity.ECM_d37.R1"
count_blanks <- function(x) {
sum(x == "")
}
blank_counts <- sapply(pep, count_blanks)
ecols <- grep("Intensity\\.", names(pep))
pe <- readQFeatures(assayData = pep, fnames = 1,
ecol = ecols, name = "peptideRaw", sep = "\t")
# Zero values (missingness)
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw")
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
# Log transformation
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
limma::plotDensities(assay(pe[["peptideLog"]]), legend = FALSE)
legend("topright", legend = colnames(assay(pe[["peptideLog"]])), col = 1:ncol(assay(pe[["peptideLog"]])), lty = 1, cex = 0.6)
# Handeling ovrlapping protein groups
Protein_filter <- rowData(pe[["peptideLog"]])$Proteins %in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins)
pe <- pe[Protein_filter,,]
pe <- filterFeatures(pe, ~ Reverse != "+")
pe <- filterFeatures(pe, ~ Potential.contaminant != "+")
pe <- filterFeatures(pe, ~ nNonZero >= 2)
nrow(pe[["peptideLog"]])
# Median normalization
pe <- normalize(pe,
i = "peptideLog",
name = "peptideNorm",
method = "center.median"
)
boxplot(assay(pe[["peptideNorm"]]),
col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity", las=2)
limma::plotDensities(assay(pe[["peptideNorm"]]), legend = FALSE)
legend("topright", legend = colnames(assay(pe[["peptideLog"]])), col = 1:ncol(assay(pe[["peptideLog"]])), lty = 1, cex = 0.6)
group <- factor(c(rep("Day38", 3), rep("Day22", 3), rep("Day34", 3)))
colors <- c("darkred", "darkblue", "darkgreen")[group]
limma::plotMDS(assay(pe[["peptideNorm"]]), col = colors, cex = 0.5)
# Beautifull MDS plot
mds <- plotMDS(assay(pe[["peptideNorm"]]), plot = FALSE)
plot(mds$x, mds$y, col = colors, pch = 19, cex = 1, xlab = "Dimension 1 (39%)", ylab = "Dimension 2 (33%)", main = "MDS Plot")
legend("topleft", legend = colnames(assay(pe[["peptideLog"]])), col = colors, pch = 19, cex = 0.6, bty = "n")
# Summarization to protein level
pe <- aggregateFeatures(pe, i = "peptideNorm", na.rm = TRUE, name = "protein", fcol= "Proteins")
mds <- plotMDS(assay(pe[["protein"]]), plot = FALSE)
plot(mds$x, mds$y, col = colors, pch = 19, cex = 1.5, xlab = "Dimension 1 (56%)", ylab = "Dimension 2 (25%)", main = "MDS Plot after aggregation")
legend("topleft", legend = colnames(assay(pe[["peptideLog"]])), col = colors, pch = 19, cex = 0.6, bty = "n")
condition <- read.table("0_ECM/design_A1.txt", sep = "\t", header = T)
#condition <- read.table("F1/design_A1.txt", sep = "\t", header = T)
colData(pe)$condition <- as.factor(condition$condition)
pe <- msqrob(object = pe, i = "protein", formula = ~condition, overwrite=TRUE)
getCoef(rowData(pe[["protein"]])$msqrobModels[[1]])
VisualizeDesign(colData(pe),~condition)$plotlist[[1]]
## Compare genotypes
# Get coef names
coefs <- names(getCoef(rowData(pe[["protein"]])$msqrobModels[[1]]))[-1]
# Generate all combinations of coefs
coef_comb_data <- expand.grid(coefs, coefs) |>
filter(Var1 != Var2)
# List duplicate combinations (same combination with switched positions)
indx <- !duplicated(t(apply(coef_comb_data, 1, sort)))
# Remove duplicates and format combinations
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
VisualizeDesign(colData(pe),~condition)$plotlist[[1]]
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
library(gridExtra)
library(proteusLabelFree)
library(dplyr)
library(msqrob2gui)
library(ExploreModelMatrix)
library(VennDiagram)
library(ggrepel)
library(ggplot2)
library("ggVennDiagram")
library(clusterProfiler)
library(enrichplot)
organism = "org.Hs.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#launchMsqrob2App()
unite(data, col, ..., sep = "_", remove = TRUE, na.rm = FALSE)
setwd("../Proteomics/0_ECM/")
peptidesFile <- "peptides.txt"
pep <- read.table(peptidesFile, sep = "\t", header = T)
# All dataset
pep <- pep %>%
mutate(Proteins = ifelse(Proteins == "", NA, Proteins)) %>%
mutate(Intensity.1C3_d37_ECM_R1 = ifelse(Intensity.1C3_d37_ECM_R1 == "", NA, Intensity.1C3_d37_ECM_R1)) %>%
filter(Proteins != "NA") %>%
filter(Intensity.1C3_d37_ECM_R1 != "NA")
# ECM
pep <- pep[,-c(87:91, 95,96,97)]
# F1
#pep <- pep[,-c(83:88, 92:94)]
pep <- pep %>%
mutate(Proteins = sapply(str_split(Proteins, ";"), function(x) paste(x[1], collapse = ";")))
#names(pep)[names(pep) == "Intensity.2G9_d37_ECM_R1"] <- "Intensity.ECM_d37.R1"
count_blanks <- function(x) {
sum(x == "")
}
blank_counts <- sapply(pep, count_blanks)
ecols <- grep("Intensity\\.", names(pep))
pe <- readQFeatures(assayData = pep, fnames = 1,
ecol = ecols, name = "peptideRaw", sep = "\t")
# Zero values (missingness)
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw")
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
# Log transformation
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
limma::plotDensities(assay(pe[["peptideLog"]]), legend = FALSE)
legend("topright", legend = colnames(assay(pe[["peptideLog"]])), col = 1:ncol(assay(pe[["peptideLog"]])), lty = 1, cex = 0.6)
# Handeling ovrlapping protein groups
Protein_filter <- rowData(pe[["peptideLog"]])$Proteins %in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins)
pe <- pe[Protein_filter,,]
pe <- filterFeatures(pe, ~ Reverse != "+")
pe <- filterFeatures(pe, ~ Potential.contaminant != "+")
pe <- filterFeatures(pe, ~ nNonZero >= 2)
nrow(pe[["peptideLog"]])
# Median normalization
pe <- normalize(pe,
i = "peptideLog",
name = "peptideNorm",
method = "center.median"
)
boxplot(assay(pe[["peptideNorm"]]),
col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity", las=2)
limma::plotDensities(assay(pe[["peptideNorm"]]), legend = FALSE)
legend("topright", legend = colnames(assay(pe[["peptideLog"]])), col = 1:ncol(assay(pe[["peptideLog"]])), lty = 1, cex = 0.6)
group <- factor(c(rep("Day38", 3), rep("Day22", 3), rep("Day34", 3)))
colors <- c("darkred", "darkblue", "darkgreen")[group]
limma::plotMDS(assay(pe[["peptideNorm"]]), col = colors, cex = 0.5)
# Beautifull MDS plot
mds <- plotMDS(assay(pe[["peptideNorm"]]), plot = FALSE)
plot(mds$x, mds$y, col = colors, pch = 19, cex = 1, xlab = "Dimension 1 (39%)", ylab = "Dimension 2 (33%)", main = "MDS Plot")
legend("topleft", legend = colnames(assay(pe[["peptideLog"]])), col = colors, pch = 19, cex = 0.6, bty = "n")
# Summarization to protein level
pe <- aggregateFeatures(pe, i = "peptideNorm", na.rm = TRUE, name = "protein", fcol= "Proteins")
mds <- plotMDS(assay(pe[["protein"]]), plot = FALSE)
plot(mds$x, mds$y, col = colors, pch = 19, cex = 1.5, xlab = "Dimension 1 (56%)", ylab = "Dimension 2 (25%)", main = "MDS Plot after aggregation")
legend("topleft", legend = colnames(assay(pe[["peptideLog"]])), col = colors, pch = 19, cex = 0.6, bty = "n")
condition <- read.table("0_ECM/design_A1.txt", sep = "\t", header = T)
#condition <- read.table("F1/design_A1.txt", sep = "\t", header = T)
colData(pe)$condition <- as.factor(condition$condition)
pe <- msqrob(object = pe, i = "protein", formula = ~condition, overwrite=TRUE)
getCoef(rowData(pe[["protein"]])$msqrobModels[[1]])
VisualizeDesign(colData(pe),~condition)$plotlist[[1]]
## Compare genotypes
# Get coef names
coefs <- names(getCoef(rowData(pe[["protein"]])$msqrobModels[[1]]))[-1]
# Generate all combinations of coefs
coef_comb_data <- expand.grid(coefs, coefs) |>
filter(Var1 != Var2)
# List duplicate combinations (same combination with switched positions)
indx <- !duplicated(t(apply(coef_comb_data, 1, sort)))
# Remove duplicates and format combinations
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
pe
coef_comb_data
indx
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = "-") |>
pull(var = contrast, name = NULL)
unite(contrast, Var1, Var2, sep = " - ")
unite(contrast, Var1, Var2)
unite(contrast, Var1, sep = " - ")
unite(contrast, Var1)
unite(contrast)
packageVersion("tidyr")
coef_comb_data[indx, ] %>% unite("contrast", Var1, Var2, sep = " - ")
coef_comb_data
coef_comb_data[indx, ]
library(ExploreModelMatrix)
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
coefs <- names(getCoef(rowData(pe[["protein"]])$msqrobModels[[1]]))[-1]
coef_comb_data <- expand.grid(coefs, coefs) |>
filter(Var1 != Var2)
indx <- !duplicated(t(apply(coef_comb_data, 1, sort)))
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
library(gridExtra)
library(proteusLabelFree)
library(dplyr)
library(msqrob2gui)
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ")
coef_comb_data[indx, ]
contrast
