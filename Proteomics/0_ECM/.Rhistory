matrix_d34 <- DEP_d34d22$Matrix == "Matrix"
matrix_d38 <- DEP_d38d22$Matrix == "Matrix"
pro_d34 <- DEP_d34d22 %>%
filter(matrix_d34) %>%
pull(Symbol)
pro_d38 <- DEP_d38d22 %>%
filter(matrix_d38) %>%
pull(Symbol)
list = list(pro_d34, pro_d38)
ggVennDiagram(list, label_alpha = 0, label_size = 5,
category.names = c("Mid", "Late")) + ggplot2::scale_fill_gradient(low="blue",high = "yellow") + ggplot2::coord_flip()
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
library(gridExtra)
library(proteusLabelFree)
library(dplyr)
library(msqrob2gui)
library(ExploreModelMatrix)
library(VennDiagram)
library(ggrepel)
library(ggplot2)
library("ggVennDiagram")
library(clusterProfiler)
library(enrichplot)
organism = "org.Hs.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#launchMsqrob2App()
# Enrichment
original_gene_list <- DEP_d38d22$Symbol
gene_sets_hallmark <- msigdbr::msigdbr(species = "Homo sapiens", category = "H")
gene_sets_GO_BP <- msigdbr::msigdbr(species = "Homo sapiens", category = "C5", subcategory = "BP")
gene_sets_GO_CC <- msigdbr::msigdbr(species = "Homo sapiens", category = "C5", subcategory = "CC")
gene_sets_GO_MF <- msigdbr::msigdbr(species = "Homo sapiens", category = "C5", subcategory = "MF")
gene_sets_KEGG <- msigdbr::msigdbr(species = "Homo sapiens", category = "C2", subcategory = "KEGG")
gene_sets_Reactome <- msigdbr::msigdbr(species = "Homo sapiens", category = "C2", subcategory = "REACTOME")
gene_sets_hallmark <- gene_sets_hallmark %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_GO_BP <- gene_sets_GO_BP %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_GO_CC <- gene_sets_GO_CC %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_GO_MF <- gene_sets_GO_MF %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_KEGG <- gene_sets_KEGG %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_Reactome <- gene_sets_Reactome %>%
dplyr::select(gs_name, gene_symbol)
# Enrichment
original_gene_list <- DEP_d38d22$Symbol
gene_sets_hallmark <- msigdbr::msigdbr(species = "Homo sapiens", category = "H")
gene_sets_GO_BP <- msigdbr::msigdbr(species = "Homo sapiens", category = "C5", subcategory = "BP")
gene_sets_GO_CC <- msigdbr::msigdbr(species = "Homo sapiens", category = "C5", subcategory = "CC")
gene_sets_GO_MF <- msigdbr::msigdbr(species = "Homo sapiens", category = "C5", subcategory = "MF")
gene_sets_KEGG <- msigdbr::msigdbr(species = "Homo sapiens", category = "C2", subcategory = "KEGG")
gene_sets_Reactome <- msigdbr::msigdbr(species = "Homo sapiens", category = "C2", subcategory = "REACTOME")
gene_sets_hallmark <- gene_sets_hallmark %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_GO_BP <- gene_sets_GO_BP %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_GO_CC <- gene_sets_GO_CC %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_GO_MF <- gene_sets_GO_MF %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_KEGG <- gene_sets_KEGG %>%
dplyr::select(gs_name, gene_symbol)
gene_sets_Reactome <- gene_sets_Reactome %>%
dplyr::select(gs_name, gene_symbol)
CC <- as.data.frame(enricher(gene = original_gene_list,
TERM2GENE = gene_sets_GO_CC, pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.05))
BP <- as.data.frame(enricher(gene = original_gene_list, TERM2GENE = gene_sets_GO_BP,
pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.05))
MF <- as.data.frame(enricher(gene = original_gene_list, TERM2GENE = gene_sets_GO_MF,
pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.05))
# Select the first three columns
df_combined <- rbind(CC, BP, MF)
df_combined$log10_Adjusted <- -log10(df_combined$qvalue)
df_combined <- df_combined %>%
mutate(ONTOLOGY = case_when(
grepl("^GOMF_", Description) ~ "MF",
grepl("^GOCC_", Description) ~ "CC",
grepl("^GOBP_", Description) ~ "BP",
TRUE ~ NA_character_
),
Description = gsub("GOMF_|GOCC_|GOBP_", "", Description))
write.table(df_combined, file = "GO_d38vsd22_F1.txt", sep = "\t")
df_BP <- BP[1:4,]
df_CC <- CC[1:4,]
df_MF <- MF[1:4,]
# Combine the dataframes back if needed
df_combined <- rbind(df_BP, df_CC, df_MF)
df_combined$ID <- gsub("GOMF_|GOCC_|GOBP_", "", df_combined$ID)
df_combined$log10_Adjusted <- -log10(df_combined$qvalue)
df_combined <- df_combined %>%
mutate(ONTOLOGY = case_when(
grepl("^GOMF_", Description) ~ "MF",
grepl("^GOCC_", Description) ~ "CC",
grepl("^GOBP_", Description) ~ "BP",
TRUE ~ NA_character_
),
Description = gsub("GOMF_|GOCC_|GOBP_", "", Description))
ggplot(df_combined, aes(x = log10_Adjusted, y = reorder(ID, log10_Adjusted), fill = ONTOLOGY)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("BP" = "blue3", "CC" = "coral", "MF" = "azure3")) +
labs(
title = "",
x = "-log10(q-value)",
y = "Enrichments",
fill = "Databases"
) +
theme_classic() +
theme(
axis.text.y = element_text(size = 12, face = "bold", colour = "black"),
axis.text.x = element_text(size = 12, face = "bold", colour = "black"),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
)
# Volcano plot
DEP_d34d22 <- DEP_d34d22 %>%
mutate(
highlight = case_when(
pval < 0.05 & grepl("Matrix", Matrix) ~ "Matrix",
pval < 0.05 ~ "Sig",
TRUE ~ "Not_sig"
)
)
DEP_d38d22 <- DEP_d38d22 %>%
mutate(
highlight = case_when(
pval < 0.05 & grepl("Matrix", Matrix) ~ "Matrix",
pval < 0.05 ~ "Sig",
TRUE ~ "Not_sig"
)
)
color_map <- c(
"Sig" = "darkred",
"Not_sig" = "black",
"Matrix" = "blue"
)
volcano <- ggplot(DEP_d34d22,
aes(x = logFC, y = -log10(pval), colour= highlight)) +
geom_point(cex = 2.0, stroke = 0.6, color = "black") +
geom_point(aes(fill = highlight), cex = 2.0, stroke = 0.5) +
theme_minimal() +
labs(x="Log2(fold change)",
y="-Log10(p-value)") +
scale_color_manual(values=color_map) +
theme(legend.position="top", axis.line = element_line(color = "black"),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "gray") +
geom_vline(xintercept=c(-1.5, 1.5), linetype="dashed", color = "gray")
volcano <- volcano +
geom_text_repel(data = subset(DEP_d34d22, highlight %in% c("Matrix") & abs(logFC) > 1.2),
aes(label = Symbol),
size = 3,
max.overlaps = 20)
volcano
# Volcano plot
DEP_d34d22 <- DEP_d34d22 %>%
mutate(
highlight = case_when(
pval < 0.05 & grepl("Matrix", Matrix) ~ "Matrix",
pval < 0.05 ~ "Sig",
TRUE ~ "Not_sig"
)
)
DEP_d38d22 <- DEP_d38d22 %>%
mutate(
highlight = case_when(
pval < 0.05 & grepl("Matrix", Matrix) ~ "Matrix",
pval < 0.05 ~ "Sig",
TRUE ~ "Not_sig"
)
)
color_map <- c(
"Sig" = "darkred",
"Not_sig" = "black",
"Matrix" = "blue"
)
volcano <- ggplot(DEP_d34d22,
aes(x = logFC, y = -log10(pval), colour= highlight)) +
geom_point(cex = 2.0, stroke = 0.6, color = "black") +
geom_point(aes(fill = highlight), cex = 2.0, stroke = 0.5) +
theme_minimal() +
labs(x="Log2(fold change)",
y="-Log10(p-value)") +
scale_color_manual(values=color_map) +
theme(legend.position="top", axis.line = element_line(color = "black"),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "gray") +
geom_vline(xintercept=c(-1.5, 1.5), linetype="dashed", color = "gray")
volcano <- volcano +
geom_text_repel(data = subset(DEP_d34d22, highlight %in% "Matrix" & abs(logFC) > 1.2),
aes(label = Symbol),
size = 3,
max.overlaps = 20)
volcano
# Volcano plot
DEP_d34d22 <- DEP_d34d22 %>%
mutate(
highlight = case_when(
pval < 0.05 & grepl("Matrix", Matrix) ~ "Matrix",
pval < 0.05 ~ "Sig",
TRUE ~ "Not_sig"
)
)
DEP_d38d22 <- DEP_d38d22 %>%
mutate(
highlight = case_when(
pval < 0.05 & grepl("Matrix", Matrix) ~ "Matrix",
pval < 0.05 ~ "Sig",
TRUE ~ "Not_sig"
)
)
color_map <- c(
"Sig" = "darkred",
"Not_sig" = "black",
"Matrix" = "blue"
)
volcano1 <- ggplot(DEP_d34d22,
aes(x = logFC, y = -log10(pval), colour= highlight)) +
geom_point(cex = 2.0, stroke = 0.6, color = "black") +
geom_point(aes(fill = highlight), cex = 2.0, stroke = 0.5) +
theme_minimal() +
labs(x="Log2(fold change)",
y="-Log10(p-value)") +
scale_color_manual(values=color_map) +
theme(legend.position="top", axis.line = element_line(color = "black"),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "gray") +
geom_vline(xintercept=c(-1.5, 1.5), linetype="dashed", color = "gray")
volcano1 <- volcano1 +
geom_text_repel(data = subset(DEP_d34d22, highlight %in% "Matrix" & abs(logFC) > 1.2),
aes(label = Symbol),
size = 3,
max.overlaps = 20)
volcano2 <- ggplot(DEP_d38d22,
aes(x = logFC, y = -log10(pval), colour= highlight)) +
geom_point(cex = 2.0, stroke = 0.6, color = "black") +
geom_point(aes(fill = highlight), cex = 2.0, stroke = 0.5) +
theme_minimal() +
labs(x="Log2(fold change)",
y="-Log10(p-value)") +
scale_color_manual(values=color_map) +
theme(legend.position="top", axis.line = element_line(color = "black"),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "gray") +
geom_vline(xintercept=c(-1.5, 1.5), linetype="dashed", color = "gray")
volcano2 <- volcano2 +
geom_text_repel(data = subset(DEP_d34d22, highlight %in% "Matrix" & abs(logFC) > 1.2),
aes(label = Symbol),
size = 3,
max.overlaps = 20)
volcano1
volcano2
View(DEP_d34d22)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
library(gridExtra)
library(proteusLabelFree)
library(dplyr)
library(msqrob2gui)
library(ExploreModelMatrix)
library(VennDiagram)
library(ggrepel)
library(ggplot2)
library("ggVennDiagram")
library(clusterProfiler)
library(enrichplot)
organism = "org.Hs.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#launchMsqrob2App()
setwd("../Proteomics/0_ECM/")
peptidesFile <- "peptides.txt"
pep <- read.table(peptidesFile, sep = "\t", header = T)
# All dataset
pep <- pep %>%
mutate(Proteins = ifelse(Proteins == "", NA, Proteins)) %>%
mutate(Intensity.1C3_d37_ECM_R1 = ifelse(Intensity.1C3_d37_ECM_R1 == "", NA, Intensity.1C3_d37_ECM_R1)) %>%
filter(Proteins != "NA") %>%
filter(Intensity.1C3_d37_ECM_R1 != "NA")
# ECM
pep <- pep[,-c(87:91, 95,96,97)]
# F1
#pep <- pep[,-c(83:88, 92:94)]
pep <- pep %>%
mutate(Proteins = sapply(str_split(Proteins, ";"), function(x) paste(x[1], collapse = ";")))
#names(pep)[names(pep) == "Intensity.2G9_d37_ECM_R1"] <- "Intensity.ECM_d37.R1"
count_blanks <- function(x) {
sum(x == "")
}
blank_counts <- sapply(pep, count_blanks)
ecols <- grep("Intensity\\.", names(pep))
pe <- readQFeatures(assayData = pep, fnames = 1,
ecol = ecols, name = "peptideRaw", sep = "\t")
# Zero values (missingness)
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw")
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
# Log transformation
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
limma::plotDensities(assay(pe[["peptideLog"]]), legend = FALSE)
legend("topright", legend = colnames(assay(pe[["peptideLog"]])), col = 1:ncol(assay(pe[["peptideLog"]])), lty = 1, cex = 0.6)
# Handeling ovrlapping protein groups
Protein_filter <- rowData(pe[["peptideLog"]])$Proteins %in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins)
pe <- pe[Protein_filter,,]
pe <- filterFeatures(pe, ~ Reverse != "+")
pe <- filterFeatures(pe, ~ Potential.contaminant != "+")
pe <- filterFeatures(pe, ~ nNonZero >= 2)
nrow(pe[["peptideLog"]])
# Median normalization
pe <- normalize(pe,
i = "peptideLog",
name = "peptideNorm",
method = "center.median"
)
boxplot(assay(pe[["peptideNorm"]]),
col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity", las=2)
limma::plotDensities(assay(pe[["peptideNorm"]]), legend = FALSE)
legend("topright", legend = colnames(assay(pe[["peptideLog"]])), col = 1:ncol(assay(pe[["peptideLog"]])), lty = 1, cex = 0.6)
group <- factor(c(rep("Day38", 3), rep("Day22", 3), rep("Day34", 3)))
colors <- c("darkred", "darkblue", "darkgreen")[group]
limma::plotMDS(assay(pe[["peptideNorm"]]), col = colors, cex = 0.5)
# Beautifull MDS plot
mds <- plotMDS(assay(pe[["peptideNorm"]]), plot = FALSE)
plot(mds$x, mds$y, col = colors, pch = 19, cex = 1, xlab = "Dimension 1 (39%)", ylab = "Dimension 2 (33%)", main = "MDS Plot")
legend("topleft", legend = colnames(assay(pe[["peptideLog"]])), col = colors, pch = 19, cex = 0.6, bty = "n")
# Summarization to protein level
pe <- aggregateFeatures(pe, i = "peptideNorm", na.rm = TRUE, name = "protein", fcol= "Proteins")
mds <- plotMDS(assay(pe[["protein"]]), plot = FALSE)
plot(mds$x, mds$y, col = colors, pch = 19, cex = 1.5, xlab = "Dimension 1 (56%)", ylab = "Dimension 2 (25%)", main = "MDS Plot after aggregation")
legend("topleft", legend = colnames(assay(pe[["peptideLog"]])), col = colors, pch = 19, cex = 0.6, bty = "n")
condition <- read.table("0_ECM/design_A1.txt", sep = "\t", header = T)
#condition <- read.table("F1/design_A1.txt", sep = "\t", header = T)
colData(pe)$condition <- as.factor(condition$condition)
pe <- msqrob(object = pe, i = "protein", formula = ~condition, overwrite=TRUE)
getCoef(rowData(pe[["protein"]])$msqrobModels[[1]])
VisualizeDesign(colData(pe),~condition)$plotlist[[1]]
## Compare genotypes
# Get coef names
coefs <- names(getCoef(rowData(pe[["protein"]])$msqrobModels[[1]]))[-1]
# Generate all combinations of coefs
coef_comb_data <- expand.grid(coefs, coefs) |>
filter(Var1 != Var2)
# List duplicate combinations (same combination with switched positions)
indx <- !duplicated(t(apply(coef_comb_data, 1, sort)))
# Remove duplicates and format combinations
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
VisualizeDesign(colData(pe),~condition)$plotlist[[1]]
## Compare genotypes
# Get coef names
coefs <- names(getCoef(rowData(pe[["protein"]])$msqrobModels[[1]]))[-1]
# Generate all combinations of coefs
coef_comb_data <- expand.grid(coefs, coefs) |>
filter(Var1 != Var2)
# List duplicate combinations (same combination with switched positions)
indx <- !duplicated(t(apply(coef_comb_data, 1, sort)))
# Remove duplicates and format combinations
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
VisualizeDesign(colData(pe),~condition)$plotlist[[1]]
## Compare genotypes
# Get coef names
coefs <- names(getCoef(rowData(pe[["protein"]])$msqrobModels[[1]]))[-1]
# Generate all combinations of coefs
coef_comb_data <- expand.grid(coefs, coefs) |>
filter(Var1 != Var2)
# List duplicate combinations (same combination with switched positions)
indx <- !duplicated(t(apply(coef_comb_data, 1, sort)))
# Remove duplicates and format combinations
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
library(gridExtra)
library(proteusLabelFree)
library(dplyr)
library(msqrob2gui)
library(ExploreModelMatrix)
library(VennDiagram)
library(ggrepel)
library(ggplot2)
library("ggVennDiagram")
library(clusterProfiler)
library(enrichplot)
organism = "org.Hs.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#launchMsqrob2App()
setwd("../Proteomics/0_ECM/")
peptidesFile <- "peptides.txt"
pep <- read.table(peptidesFile, sep = "\t", header = T)
# All dataset
pep <- pep %>%
mutate(Proteins = ifelse(Proteins == "", NA, Proteins)) %>%
mutate(Intensity.1C3_d37_ECM_R1 = ifelse(Intensity.1C3_d37_ECM_R1 == "", NA, Intensity.1C3_d37_ECM_R1)) %>%
filter(Proteins != "NA") %>%
filter(Intensity.1C3_d37_ECM_R1 != "NA")
# ECM
pep <- pep[,-c(87:91, 95,96,97)]
# F1
#pep <- pep[,-c(83:88, 92:94)]
pep <- pep %>%
mutate(Proteins = sapply(str_split(Proteins, ";"), function(x) paste(x[1], collapse = ";")))
#names(pep)[names(pep) == "Intensity.2G9_d37_ECM_R1"] <- "Intensity.ECM_d37.R1"
count_blanks <- function(x) {
sum(x == "")
}
blank_counts <- sapply(pep, count_blanks)
ecols <- grep("Intensity\\.", names(pep))
pe <- readQFeatures(assayData = pep, fnames = 1,
ecol = ecols, name = "peptideRaw", sep = "\t")
# Zero values (missingness)
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw")
MSnbase::plotNA(assay(pe[["peptideRaw"]])) +
xlab("Peptide index (ordered by data completeness)")
# Log transformation
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
limma::plotDensities(assay(pe[["peptideLog"]]), legend = FALSE)
legend("topright", legend = colnames(assay(pe[["peptideLog"]])), col = 1:ncol(assay(pe[["peptideLog"]])), lty = 1, cex = 0.6)
# Handeling ovrlapping protein groups
Protein_filter <- rowData(pe[["peptideLog"]])$Proteins %in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins)
pe <- pe[Protein_filter,,]
pe <- filterFeatures(pe, ~ Reverse != "+")
pe <- filterFeatures(pe, ~ Potential.contaminant != "+")
pe <- filterFeatures(pe, ~ nNonZero >= 2)
nrow(pe[["peptideLog"]])
# Median normalization
pe <- normalize(pe,
i = "peptideLog",
name = "peptideNorm",
method = "center.median"
)
boxplot(assay(pe[["peptideNorm"]]),
col = palette()[-1],
main = "Peptide distribtutions after normalisation", ylab = "intensity", las=2)
limma::plotDensities(assay(pe[["peptideNorm"]]), legend = FALSE)
legend("topright", legend = colnames(assay(pe[["peptideLog"]])), col = 1:ncol(assay(pe[["peptideLog"]])), lty = 1, cex = 0.6)
group <- factor(c(rep("Day38", 3), rep("Day22", 3), rep("Day34", 3)))
colors <- c("darkred", "darkblue", "darkgreen")[group]
limma::plotMDS(assay(pe[["peptideNorm"]]), col = colors, cex = 0.5)
# Beautifull MDS plot
mds <- plotMDS(assay(pe[["peptideNorm"]]), plot = FALSE)
plot(mds$x, mds$y, col = colors, pch = 19, cex = 1, xlab = "Dimension 1 (39%)", ylab = "Dimension 2 (33%)", main = "MDS Plot")
legend("topleft", legend = colnames(assay(pe[["peptideLog"]])), col = colors, pch = 19, cex = 0.6, bty = "n")
# Summarization to protein level
pe <- aggregateFeatures(pe, i = "peptideNorm", na.rm = TRUE, name = "protein", fcol= "Proteins")
mds <- plotMDS(assay(pe[["protein"]]), plot = FALSE)
plot(mds$x, mds$y, col = colors, pch = 19, cex = 1.5, xlab = "Dimension 1 (56%)", ylab = "Dimension 2 (25%)", main = "MDS Plot after aggregation")
legend("topleft", legend = colnames(assay(pe[["peptideLog"]])), col = colors, pch = 19, cex = 0.6, bty = "n")
condition <- read.table("0_ECM/design_A1.txt", sep = "\t", header = T)
#condition <- read.table("F1/design_A1.txt", sep = "\t", header = T)
colData(pe)$condition <- as.factor(condition$condition)
pe <- msqrob(object = pe, i = "protein", formula = ~condition, overwrite=TRUE)
getCoef(rowData(pe[["protein"]])$msqrobModels[[1]])
VisualizeDesign(colData(pe),~condition)$plotlist[[1]]
## Compare genotypes
# Get coef names
coefs <- names(getCoef(rowData(pe[["protein"]])$msqrobModels[[1]]))[-1]
# Generate all combinations of coefs
coef_comb_data <- expand.grid(coefs, coefs) |>
filter(Var1 != Var2)
# List duplicate combinations (same combination with switched positions)
indx <- !duplicated(t(apply(coef_comb_data, 1, sort)))
# Remove duplicates and format combinations
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
VisualizeDesign(colData(pe),~condition)$plotlist[[1]]
## Compare genotypes
# Get coef names
coefs <- names(getCoef(rowData(pe[["protein"]])$msqrobModels[[1]]))[-1]
# Generate all combinations of coefs
coef_comb_data <- expand.grid(coefs, coefs) |>
filter(Var1 != Var2)
# List duplicate combinations (same combination with switched positions)
indx <- !duplicated(t(apply(coef_comb_data, 1, sort)))
# Remove duplicates and format combinations
coef_comb <- coef_comb_data[indx, ] |>
unite(contrast, Var1, Var2, sep = " - ") |>
pull(var = contrast, name = NULL)
